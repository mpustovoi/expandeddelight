plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.23'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


neoForge {
    version = project.neo_version

    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    maven {
        url = "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven { url = "https://maven.ryanliptak.com/" }
    maven { url = "https://api.modrinth.com/maven" }

    //KubeJS

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
            includeGroup "com.github.ianm1647"
        }
    }
}

dependencies {
    implementation "maven.modrinth:farmers-delight:${delight_version}"
    //implementation files('C:\\Users\\ianmc\\OneDrive\\Documents\\Intellij Workspaces\\Minecraft\\expandeddelight-neoforge\\src\\main\\resources\\META-INF\\jar\\farmersdelight.jar')

    compileOnly "squeek.appleskin:appleskin-neoforge:${appleskin_version}:api"
    runtimeOnly "squeek.appleskin:appleskin-neoforge:${appleskin_version}"

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"

    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    //KubeJS
    implementation "dev.architectury:architectury-neoforge:$architectury_version"
    implementation "dev.latvian.mods:kubejs-neoforge:$kubejs_version"
    implementation "dev.latvian.mods:rhino:$rhino_version"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
